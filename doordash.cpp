#include <iostream>
#include <vector>
#include <climits>
using namespace std;

// To execute C++, please define "int main()"
/*
Imagine that you are a stock analyst, and you are tasked with doing some historical analysis of one particular stock. Specifically, you are provided with some time-series data representing the price of the stock on each day for a period of N consecutive days. For example, let’s say you are given a week’s worth of data as follows:
  stockPrices = [ 150.55, 112.50, 130.25, 120.25, 145.75, 110.00, 90.90 ]

Can you please write some code to calculate the largest sum of money, or return, that will be generated by adhering to the following set of constraints:
- The stock *must* be purchased exactly one time
- The stock *must* be sold exactly one time
- The sale must happen after the point of purchase. That is to say you cannot buy and sell on the same day, and you of course cannot sell before you buy.

*/

float maxProfit(vector<float> &prices)
{
   int n = prices.size();
   if(n<=1)
     return 0.0;
   
   float buy = prices[0];
   float profit = INT_MIN;
   for(int i=1; i<n; i++)
   {
       float new_profit = prices[i] - buy;
       if(new_profit > profit)
          profit = new_profit;
       
       if(prices[i] < buy)
          buy = prices[i];
   }
   return profit;
}

int main() {
  //vector<float> prices = { 150.55, 112.50, 130.25, 120.25, 145.75, 110.00, 90.90 };
  vector<float> prices = {   120, 150};

  cout<<maxProfit(prices)<<"\n";
  return 0;
}



/*
Imagine you need to implement a simple version of Twitter (note that we’re building an MVP!). In it, users need only to be able to tweet, follow other users, and see their feed. The feed will include own tweets and tweets of the users they follow.

How would you model the data for this simplified twitter? What’s important is to outline the models and field structure and talk about the relationships between those.

*/


/*

User Table: {uid (PK), fname, lname, email, llogin,  password, pic ...};
Tweet Table:{Tid (PK), uid(FK), tweet-message, blob, time stamp, view count, favcount,  retweet count...};
Follower_Table:{followerUID, followeeUID}


Query 1: GetMyTweets(): select * from tweeetTable; where uid==myuid;
Query 2  GetmyFolloweeUIDs: select FolloweeUID from Follower_Table, where followerUID=myUID; 
query 3: For followeeUID in Query 2: 
            select * from tweetTable, where uid = followeeUID;
            
return merge(Query1's result, Query3's result);           



user: (80 bytes) * 1000,000, 0000:   80GB User Table 

1 Billion user * 5tweets * 4mb

20TB Data for tweets. 
*/













